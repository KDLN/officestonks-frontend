/**
 * Authentication service for the frontend
 * Handles API communication for auth operations
 */

import { fetchWithAuth } from '../utils/http';
import { ENDPOINTS } from '../config/api';

/**
 * Register a new user
 * @param {string} username - Username for new account
 * @param {string} password - Password for new account
 * @returns {Promise<Object>} Registration response with token
 */
export const register = async (username, password) => {
  try {
    return await fetchWithAuth(ENDPOINTS.REGISTER, {
      method: 'POST',
      body: JSON.stringify({ username, password }),
    });
  } catch (error) {
    console.error("Registration error:", error);
    throw error;
  }
};

/**
 * Login an existing user
 * @param {string} username - Username
 * @param {string} password - Password
 * @returns {Promise<Object>} Login response with token
 */
export const login = async (username, password) => {
  try {
    return await fetchWithAuth(ENDPOINTS.LOGIN, {
      method: 'POST',
      body: JSON.stringify({ username, password }),
      headers: {
        'Content-Type': 'application/json'
      }
    });
  } catch (error) {
    console.error("Login error:", error);
    throw error;
  }
};

/**
 * Check admin status against the API
 * @param {string} token - JWT token
 * @returns {Promise<boolean>} Whether user is admin
 */
export const checkAdminStatus = async (token) => {
  try {
    const response = await fetchWithAuth(ENDPOINTS.ADMIN_STATUS, {
      headers: {
        Authorization: `Bearer ${token}`
      }
    });
    
    return response && response.isAdmin === true;
  } catch (error) {
    console.error("Admin status check error:", error);
    return false;
  }
};