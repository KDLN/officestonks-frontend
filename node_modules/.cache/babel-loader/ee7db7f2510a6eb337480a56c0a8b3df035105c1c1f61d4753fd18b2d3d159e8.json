{"ast":null,"code":"// Stock market service for frontend\nimport { getToken } from './auth';\n\n// Make sure to include the correct API path\nconst BASE_URL = process.env.REACT_APP_API_URL || 'https://web-copy-production-5b48.up.railway.app';\nconst API_URL = `${BASE_URL}/api`;\nconsole.log(\"Stock service using API URL:\", API_URL);\n\n// Get all available stocks\nexport const getAllStocks = async () => {\n  try {\n    const response = await fetch(`${API_URL}/stocks`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch stocks');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching stocks:', error);\n    throw error;\n  }\n};\n\n// Get a specific stock by ID\nexport const getStockById = async stockId => {\n  try {\n    const response = await fetch(`${API_URL}/stocks/${stockId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch stock');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching stock ${stockId}:`, error);\n    throw error;\n  }\n};\n\n// Get the user's portfolio\nexport const getUserPortfolio = async () => {\n  try {\n    const token = getToken();\n    const response = await fetch(`${API_URL}/portfolio`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch portfolio');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching portfolio:', error);\n    throw error;\n  }\n};\n\n// Execute a trade (buy or sell)\nexport const executeTrade = async (stockId, quantity, action) => {\n  try {\n    const token = getToken();\n    const response = await fetch(`${API_URL}/trading`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        stock_id: stockId,\n        quantity: quantity,\n        action: action // 'buy' or 'sell'\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `Failed to ${action} stock`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(`Error executing ${action} trade:`, error);\n    throw error;\n  }\n};\n\n// Get transaction history\nexport const getTransactionHistory = async (limit = 50, offset = 0) => {\n  try {\n    const token = getToken();\n    const response = await fetch(`${API_URL}/transactions?limit=${limit}&offset=${offset}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch transaction history');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching transaction history:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getToken","BASE_URL","process","env","REACT_APP_API_URL","API_URL","console","log","getAllStocks","response","fetch","method","headers","ok","Error","json","error","getStockById","stockId","getUserPortfolio","token","executeTrade","quantity","action","body","JSON","stringify","stock_id","errorData","catch","getTransactionHistory","limit","offset"],"sources":["/home/kdln/code/officestonks/frontend/src/services/stock.js"],"sourcesContent":["// Stock market service for frontend\nimport { getToken } from './auth';\n\n// Make sure to include the correct API path\nconst BASE_URL = process.env.REACT_APP_API_URL || 'https://web-copy-production-5b48.up.railway.app';\nconst API_URL = `${BASE_URL}/api`;\nconsole.log(\"Stock service using API URL:\", API_URL);\n\n// Get all available stocks\nexport const getAllStocks = async () => {\n  try {\n    const response = await fetch(`${API_URL}/stocks`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch stocks');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching stocks:', error);\n    throw error;\n  }\n};\n\n// Get a specific stock by ID\nexport const getStockById = async (stockId) => {\n  try {\n    const response = await fetch(`${API_URL}/stocks/${stockId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch stock');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching stock ${stockId}:`, error);\n    throw error;\n  }\n};\n\n// Get the user's portfolio\nexport const getUserPortfolio = async () => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/portfolio`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch portfolio');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching portfolio:', error);\n    throw error;\n  }\n};\n\n// Execute a trade (buy or sell)\nexport const executeTrade = async (stockId, quantity, action) => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/trading`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        stock_id: stockId,\n        quantity: quantity,\n        action: action, // 'buy' or 'sell'\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `Failed to ${action} stock`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(`Error executing ${action} trade:`, error);\n    throw error;\n  }\n};\n\n// Get transaction history\nexport const getTransactionHistory = async (limit = 50, offset = 0) => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/transactions?limit=${limit}&offset=${offset}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch transaction history');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching transaction history:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}