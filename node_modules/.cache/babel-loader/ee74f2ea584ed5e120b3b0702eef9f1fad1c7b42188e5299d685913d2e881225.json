{"ast":null,"code":"// Stock market service for frontend\nimport{getToken}from'./auth';// Make sure to include the correct API path\nconst BASE_URL=process.env.REACT_APP_API_URL||'https://web-copy-production-5b48.up.railway.app';const API_URL=`${BASE_URL}/api`;console.log(\"Stock service using API URL:\",API_URL);// Get all available stocks\nexport const getAllStocks=async()=>{try{const response=await fetch(`${API_URL}/stocks`,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error('Failed to fetch stocks');}return await response.json();}catch(error){console.error('Error fetching stocks:',error);throw error;}};// Get a specific stock by ID\nexport const getStockById=async stockId=>{try{const response=await fetch(`${API_URL}/stocks/${stockId}`,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error('Failed to fetch stock');}return await response.json();}catch(error){console.error(`Error fetching stock ${stockId}:`,error);throw error;}};// Get the user's portfolio\nexport const getUserPortfolio=async()=>{try{const token=getToken();const response=await fetch(`${API_URL}/portfolio`,{method:'GET',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`}});if(!response.ok){throw new Error('Failed to fetch portfolio');}return await response.json();}catch(error){console.error('Error fetching portfolio:',error);throw error;}};// Execute a trade (buy or sell)\nexport const executeTrade=async(stockId,quantity,action)=>{try{const token=getToken();const response=await fetch(`${API_URL}/trading`,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify({stock_id:stockId,quantity:quantity,action:action// 'buy' or 'sell'\n})});if(!response.ok){const errorData=await response.json().catch(()=>({}));throw new Error(errorData.error||`Failed to ${action} stock`);}return await response.json();}catch(error){console.error(`Error executing ${action} trade:`,error);throw error;}};// Get transaction history\nexport const getTransactionHistory=async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:50;let offset=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;try{const token=getToken();const response=await fetch(`${API_URL}/transactions?limit=${limit}&offset=${offset}`,{method:'GET',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`}});if(!response.ok){throw new Error('Failed to fetch transaction history');}return await response.json();}catch(error){console.error('Error fetching transaction history:',error);throw error;}};","map":{"version":3,"names":["getToken","BASE_URL","process","env","REACT_APP_API_URL","API_URL","console","log","getAllStocks","response","fetch","method","headers","ok","Error","json","error","getStockById","stockId","getUserPortfolio","token","executeTrade","quantity","action","body","JSON","stringify","stock_id","errorData","catch","getTransactionHistory","limit","arguments","length","undefined","offset"],"sources":["/home/kdln/code/officestonks/frontend/src/services/stock.js"],"sourcesContent":["// Stock market service for frontend\nimport { getToken } from './auth';\n\n// Make sure to include the correct API path\nconst BASE_URL = process.env.REACT_APP_API_URL || 'https://web-copy-production-5b48.up.railway.app';\nconst API_URL = `${BASE_URL}/api`;\nconsole.log(\"Stock service using API URL:\", API_URL);\n\n// Get all available stocks\nexport const getAllStocks = async () => {\n  try {\n    const response = await fetch(`${API_URL}/stocks`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch stocks');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching stocks:', error);\n    throw error;\n  }\n};\n\n// Get a specific stock by ID\nexport const getStockById = async (stockId) => {\n  try {\n    const response = await fetch(`${API_URL}/stocks/${stockId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch stock');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(`Error fetching stock ${stockId}:`, error);\n    throw error;\n  }\n};\n\n// Get the user's portfolio\nexport const getUserPortfolio = async () => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/portfolio`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch portfolio');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching portfolio:', error);\n    throw error;\n  }\n};\n\n// Execute a trade (buy or sell)\nexport const executeTrade = async (stockId, quantity, action) => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/trading`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n      body: JSON.stringify({\n        stock_id: stockId,\n        quantity: quantity,\n        action: action, // 'buy' or 'sell'\n      }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `Failed to ${action} stock`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error(`Error executing ${action} trade:`, error);\n    throw error;\n  }\n};\n\n// Get transaction history\nexport const getTransactionHistory = async (limit = 50, offset = 0) => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/transactions?limit=${limit}&offset=${offset}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch transaction history');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching transaction history:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}