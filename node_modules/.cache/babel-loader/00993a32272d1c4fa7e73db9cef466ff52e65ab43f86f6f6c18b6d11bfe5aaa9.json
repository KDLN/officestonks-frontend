{"ast":null,"code":"// User service for frontend\nimport { getToken } from './auth';\n\n// Make sure to include the correct API path\nconst BASE_URL = process.env.REACT_APP_API_URL || 'https://web-production-1e26.up.railway.app';\nconst API_URL = `${BASE_URL}/api`;\n\n// Get leaderboard data\nexport const getLeaderboard = async (limit = 10) => {\n  try {\n    const response = await fetch(`${API_URL}/users/leaderboard?limit=${limit}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch leaderboard');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching leaderboard:', error);\n    throw error;\n  }\n};\n\n// Get current user's profile\nexport const getUserProfile = async () => {\n  try {\n    const token = getToken();\n    const response = await fetch(`${API_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["getToken","BASE_URL","process","env","REACT_APP_API_URL","API_URL","getLeaderboard","limit","response","fetch","method","headers","ok","Error","json","error","console","getUserProfile","token"],"sources":["/home/kdln/code/officestonks/frontend/src/services/user.js"],"sourcesContent":["// User service for frontend\nimport { getToken } from './auth';\n\n// Make sure to include the correct API path\nconst BASE_URL = process.env.REACT_APP_API_URL || 'https://web-production-1e26.up.railway.app';\nconst API_URL = `${BASE_URL}/api`;\n\n// Get leaderboard data\nexport const getLeaderboard = async (limit = 10) => {\n  try {\n    const response = await fetch(`${API_URL}/users/leaderboard?limit=${limit}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch leaderboard');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching leaderboard:', error);\n    throw error;\n  }\n};\n\n// Get current user's profile\nexport const getUserProfile = async () => {\n  try {\n    const token = getToken();\n    \n    const response = await fetch(`${API_URL}/users/me`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AACA,SAASA,QAAQ,QAAQ,QAAQ;;AAEjC;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,4CAA4C;AAC9F,MAAMC,OAAO,GAAG,GAAGJ,QAAQ,MAAM;;AAEjC;AACA,OAAO,MAAMK,cAAc,GAAG,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;EAClD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,4BAA4BE,KAAK,EAAE,EAAE;MAC1EG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,KAAK,GAAGlB,QAAQ,CAAC,CAAC;IAExB,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,WAAW,EAAE;MAClDK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUO,KAAK;MAClC;IACF,CAAC,CAAC;IAEF,IAAI,CAACV,QAAQ,CAACI,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}